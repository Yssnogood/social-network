# Étape de build - utilisation d'une image Debian pour éviter les problèmes liés à musl
FROM golang:1.22-bullseye AS builder

WORKDIR /app

# Copier les fichiers de dépendances
COPY go.mod go.sum ./
RUN go mod download

# Copier le code source
COPY . .

# Compiler l'application
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o main ./backend/cmd/server/main.go

# Étape d'exécution - utilisation d'une image légère mais compatible
FROM debian:bullseye-slim

WORKDIR /app

# Installer SQLite et autres dépendances nécessaires
RUN apt-get update && apt-get install -y \
    sqlite3 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copier le binaire compilé depuis l'étape de build
COPY --from=builder /app/main .
COPY --from=builder /app/backend/database/migrations ./backend/database/migrations

# Créer le répertoire pour la base de données SQLite
RUN mkdir -p backend/database/sqlite

# Exposer le port - utiliser la variable d'environnement
EXPOSE 8080

# Commande d'exécution
CMD ["./main"]